{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable */\nfunction parseDotNotation(str, val, obj) {\n  let currentObj = obj,\n      keys = str.split(\".\"),\n      i,\n      l = Math.max(1, keys.length - 1),\n      key;\n\n  for (i = 0; i < l; ++i) {\n    key = keys[i];\n    currentObj[key] = currentObj[key] || {};\n    currentObj = currentObj[key];\n  }\n\n  currentObj[keys[i]] = val;\n  delete obj[str];\n}\n\nfunction convertDotNotationToObject(obj) {\n  for (const key in obj) {\n    if (key.indexOf(\".\") !== -1) {\n      parseDotNotation(key, obj[key], obj);\n    }\n  }\n\n  return obj;\n}\n\nfunction serializeArray(form) {\n  const arr = [];\n  Array.prototype.slice.call(form.elements).forEach(field => {\n    if (!field.name || field.disabled || [\"file\", \"reset\", \"submit\", \"button\"].indexOf(field.type) > -1) return;\n\n    if (field.type === \"select-multiple\") {\n      Array.prototype.slice.call(field.options).forEach(option => {\n        if (!option.selected) return;\n        arr.push({\n          name: field.name,\n          value: option.value\n        });\n      });\n      return;\n    }\n\n    if ([\"checkbox\", \"radio\"].indexOf(field.type) > -1 && !field.checked) return;\n    arr.push({\n      name: field.name,\n      value: field.value\n    });\n  });\n  return arr;\n}\n\nexport function getFormValues(form) {\n  const serializedArray = serializeArray(form); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const output = {};\n  serializedArray.forEach(item => {\n    if (item.name.split(\"-\")[0] === \"educations\" || item.name.split(\"-\")[0] === \"jobs\") {\n      if (!output[item.name.split(\"-\")[0]]) output[item.name.split(\"-\")[0]] = [];\n      output[item.name.split(\"-\")[0]][item.name.split(\"-\")[2]] = _objectSpread(_objectSpread({}, output[item.name.split(\"-\")[0]][item.name.split(\"-\")[2]]), {}, {\n        [item.name.split(\"-\")[1]]: item.value\n      });\n    } else {\n      output[item.name] = item.value;\n    }\n  });\n  return convertDotNotationToObject(output);\n}","map":null,"metadata":{},"sourceType":"module"}