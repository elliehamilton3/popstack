{"ast":null,"code":"import Stripe from 'stripe';\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  // https://github.com/stripe/stripe-node#configuration\n  apiVersion: '2020-08-27'\n});\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    try {\n      let price;\n      const trial = [];\n\n      if (req.body.priceId === \"oneweek\") {\n        price = process.env.WEEK_PRICE_ID;\n        trial.push({\n          price: process.env.MONTHLY_PRICE_ID,\n          quantity: 1\n        });\n      }\n\n      ;\n      if (req.body.priceId === \"monthly\") price = process.env.MONTHLY_PRICE_ID;\n      if (req.body.priceId === \"yearly\") price = process.env.YEARLY_PRICE_ID; // Create Checkout Sessions from body params.\n\n      const params = {\n        mode: \"subscription\",\n        payment_method_types: [\"card\"],\n        line_items: [{\n          price,\n          quantity: 1\n        }, ...trial],\n        subscription_data: trial.length > 0 && {\n          trial_period_days: 7\n        },\n        success_url: `${req.headers.origin}/result?session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: `${req.headers.origin}/pricing`\n      }; // console.log(params)\n\n      const checkoutSession = await stripe.checkout.sessions.create(params);\n      res.status(200).json(checkoutSession);\n    } catch (err) {\n      res.status(500).json({\n        statusCode: 500,\n        message: err.message\n      });\n    }\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n}","map":{"version":3,"sources":["/Users/ellie/Developer/popstack/packages/ui/pages/api/checkout_sessions/index.ts"],"names":["Stripe","stripe","process","env","STRIPE_SECRET_KEY","apiVersion","handler","req","res","method","price","trial","body","priceId","WEEK_PRICE_ID","push","MONTHLY_PRICE_ID","quantity","YEARLY_PRICE_ID","params","mode","payment_method_types","line_items","subscription_data","length","trial_period_days","success_url","headers","origin","cancel_url","checkoutSession","checkout","sessions","create","status","json","err","statusCode","message","setHeader","end"],"mappings":"AAEA,OAAOA,MAAP,MAAmB,QAAnB;AACA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAWE,OAAO,CAACC,GAAR,CAAYC,iBAAvB,EAA2C;AACxD;AACAC,EAAAA,UAAU,EAAE;AAF4C,CAA3C,CAAf;AAKA,eAAe,eAAeC,OAAf,CACbC,GADa,EAEbC,GAFa,EAGb;AACA,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,UAAIC,KAAJ;AACA,YAAMC,KAAW,GAAG,EAApB;;AACA,UAAGJ,GAAG,CAACK,IAAJ,CAASC,OAAT,KAAqB,SAAxB,EAAmC;AACjCH,QAAAA,KAAK,GAAGR,OAAO,CAACC,GAAR,CAAYW,aAApB;AACAH,QAAAA,KAAK,CAACI,IAAN,CAAY;AACVL,UAAAA,KAAK,EAAER,OAAO,CAACC,GAAR,CAAYa,gBADT;AAEVC,UAAAA,QAAQ,EAAE;AAFA,SAAZ;AAKD;;AAAA;AACD,UAAGV,GAAG,CAACK,IAAJ,CAASC,OAAT,KAAqB,SAAxB,EAAmCH,KAAK,GAAGR,OAAO,CAACC,GAAR,CAAYa,gBAApB;AACnC,UAAGT,GAAG,CAACK,IAAJ,CAASC,OAAT,KAAqB,QAAxB,EAAkCH,KAAK,GAAGR,OAAO,CAACC,GAAR,CAAYe,eAApB,CAZhC,CAaF;;AACA,YAAMC,MAA2C,GAAG;AAClDC,QAAAA,IAAI,EAAE,cAD4C;AAElDC,QAAAA,oBAAoB,EAAE,CAAC,MAAD,CAF4B;AAGlDC,QAAAA,UAAU,EAAE,CACV;AACEZ,UAAAA,KADF;AAEEO,UAAAA,QAAQ,EAAE;AAFZ,SADU,EAKV,GAAGN,KALO,CAHsC;AAUlDY,QAAAA,iBAAiB,EAAEZ,KAAK,CAACa,MAAN,GAAe,CAAf,IAAoB;AAACC,UAAAA,iBAAiB,EAAE;AAApB,SAVW;AAWlDC,QAAAA,WAAW,EAAG,GAAEnB,GAAG,CAACoB,OAAJ,CAAYC,MAAO,0CAXe;AAYlDC,QAAAA,UAAU,EAAG,GAAEtB,GAAG,CAACoB,OAAJ,CAAYC,MAAO;AAZgB,OAApD,CAdE,CA4BF;;AACA,YAAME,eAAwC,GAAG,MAAM7B,MAAM,CAAC8B,QAAP,CAAgBC,QAAhB,CAAyBC,MAAzB,CACrDd,MADqD,CAAvD;AAIAX,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,eAArB;AACD,KAlCD,CAkCE,OAAOM,GAAP,EAAY;AACZ5B,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,QAAAA,UAAU,EAAE,GAAd;AAAmBC,QAAAA,OAAO,EAAEF,GAAG,CAACE;AAAhC,OAArB;AACD;AACF,GAtCD,MAsCO;AACL9B,IAAAA,GAAG,CAAC+B,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACA/B,IAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBM,GAAhB,CAAoB,oBAApB;AACD;AACF","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\n\nimport Stripe from 'stripe'\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  // https://github.com/stripe/stripe-node#configuration\n  apiVersion: '2020-08-27',\n})\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  if (req.method === 'POST') {\n    try {\n      let price;\n      const trial:any[] = [];\n      if(req.body.priceId === \"oneweek\") { \n        price = process.env.WEEK_PRICE_ID \n        trial.push( {\n          price: process.env.MONTHLY_PRICE_ID ,\n          quantity: 1,\n          \n        })\n      };\n      if(req.body.priceId === \"monthly\") price = process.env.MONTHLY_PRICE_ID;\n      if(req.body.priceId === \"yearly\") price = process.env.YEARLY_PRICE_ID;\n      // Create Checkout Sessions from body params.\n      const params: Stripe.Checkout.SessionCreateParams = {\n        mode: \"subscription\",\n        payment_method_types: [\"card\"],\n        line_items: [\n          {\n            price,\n            quantity: 1,      \n          },\n          ...trial\n        ],\n        subscription_data: trial.length > 0 && {trial_period_days: 7},\n        success_url: `${req.headers.origin}/result?session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: `${req.headers.origin}/pricing`,\n      }\n      // console.log(params)\n      const checkoutSession: Stripe.Checkout.Session = await stripe.checkout.sessions.create(\n        params\n      )\n\n      res.status(200).json(checkoutSession)\n    } catch (err) {\n      res.status(500).json({ statusCode: 500, message: err.message })\n    }\n  } else {\n    res.setHeader('Allow', 'POST')\n    res.status(405).end('Method Not Allowed')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}