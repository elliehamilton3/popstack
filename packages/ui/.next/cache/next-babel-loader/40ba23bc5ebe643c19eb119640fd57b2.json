{"ast":null,"code":"var _jsxFileName = \"/ui/components/resume/resumePreview.component.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Grid, Paper, makeStyles, Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport PdfDocument from \"./pdfDocument.component\";\nimport PdfDocument2 from \"./pdfDocument2.component\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport { saveAs } from \"file-saver\";\nimport { Document as Doc, Page as DocPage } from \"react-pdf/dist/esm/entry.webpack\";\nimport blobStream from 'blob-stream';\nimport ResumeLoadingPlaceholder from \"./resumeLoadingPlaceholder.component\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: \"40px\",\n    minHeight: \"calc(100vh - 176px)\",\n    minWidth: 0\n  },\n  pdfStyles: {\n    \"& canvas\": {\n      borderRadius: \"4px\",\n      height: \"calc(100vh - 200px) !important\",\n      width: \"auto !important\"\n    },\n    \"& div div div\": {\n      display: \"none\"\n    }\n  },\n  box: {\n    backgroundColor: \"#2C6DC5\",\n    padding: \"40px\",\n    height: \"calc(100vh - 64px)\",\n    \"@media (min-width: 960px)\": {\n      position: \"fixed\",\n      width: \"50%\",\n      top: \"64px\",\n      padding: 0\n    }\n  },\n  button: {\n    backgroundColor: theme.palette.common.white\n  }\n}));\nexport const generatePdfDocument = async (documentData, resumeStyle) => {\n  if (resumeStyle === 2) {\n    const blob = await pdf(__jsx(PdfDocument2, _extends({}, documentData, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 28\n      }\n    }))).toBlob();\n    saveAs(blob, \"cv.pdf\");\n  } else if (resumeStyle === 1) {\n    const blob = await pdf(__jsx(PdfDocument, _extends({}, documentData, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 28\n      }\n    }))).toBlob();\n    saveAs(blob, \"cv.pdf\");\n  }\n};\n\nconst ResumePreview = ({\n  resume,\n  resumeStyle\n}) => {\n  const classes = useStyles();\n  const {\n    0: generatedResume,\n    1: setGeneratedResume\n  } = useState();\n  const {\n    0: numPages,\n    1: setNumPages\n  } = useState(1);\n\n  const bufferToUrl = async buffer => {\n    const stream = buffer.pipe(blobStream());\n    const url = await new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        resolve(stream.toBlobURL('application/pdf'));\n      });\n      stream.on('error', reject);\n    });\n    setGeneratedResume(url ? url : \"\");\n  };\n\n  useEffect(() => {\n    if (resume) {\n      if (resumeStyle === 2) {\n        pdf(__jsx(PdfDocument2, _extends({}, resume, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }\n        }))).toBuffer().then(bufferToUrl);\n      } else if (resumeStyle === 1) {\n        pdf(__jsx(PdfDocument, _extends({}, resume, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }))).toBuffer().then(bufferToUrl);\n      }\n    }\n  }, [resumeStyle, resume]); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  function onDocumentLoadSuccess({\n    numPages\n  }) {\n    setNumPages(numPages);\n  }\n\n  return __jsx(Box, {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    style: {\n      width: \"calc(67vh - 96px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, __jsx(Paper, {\n    elevation: 8,\n    className: `${classes.paper} ${generatedResume && classes.pdfStyles}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, !generatedResume ? __jsx(ResumeLoadingPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }) : __jsx(Doc, {\n    file: generatedResume,\n    onLoadSuccess: onDocumentLoadSuccess,\n    loading: __jsx(ResumeLoadingPlaceholder, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, __jsx(DocPage, {\n    pageNumber: numPages,\n    style: {\n      width: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    className: classes.button,\n    disabled: !resume // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ,\n    onClick: () => generatePdfDocument(resume, resumeStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }, \"Download as PDF\"))));\n};\n\nexport default ResumePreview;","map":{"version":3,"sources":["/ui/components/resume/resumePreview.component.tsx"],"names":["Box","Grid","Paper","makeStyles","Button","React","useEffect","useState","PdfDocument","PdfDocument2","pdf","saveAs","Document","Doc","Page","DocPage","blobStream","ResumeLoadingPlaceholder","useStyles","theme","paper","marginTop","minHeight","minWidth","pdfStyles","borderRadius","height","width","display","box","backgroundColor","padding","position","top","button","palette","common","white","generatePdfDocument","documentData","resumeStyle","blob","toBlob","ResumePreview","resume","classes","generatedResume","setGeneratedResume","numPages","setNumPages","bufferToUrl","buffer","stream","pipe","url","Promise","resolve","reject","on","toBlobURL","toBuffer","then","onDocumentLoadSuccess"],"mappings":"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","sourcesContent":["import { Box, Grid, Paper, Typography, makeStyles, Button } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React, { useEffect, useState } from \"react\";\nimport PdfDocument from \"./pdfDocument.component\";\nimport PdfDocument2 from \"./pdfDocument2.component\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport { saveAs } from \"file-saver\";\nimport {\n  Document as Doc,\n  Page as DocPage,\n} from \"react-pdf/dist/esm/entry.webpack\";\nimport { Resume } from \"../../interface/resume.interface\";\nimport blobStream from 'blob-stream';\nimport ResumeLoadingPlaceholder from \"./resumeLoadingPlaceholder.component\";\n\nexport interface IResumePreviewProps {\n  resume: Resume | undefined;\n  resumeStyle: 1 | 2;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: \"40px\",\n\n      minHeight:  \"calc(100vh - 176px)\",\n      minWidth: 0\n\n  },\n  pdfStyles: {\n    \"& canvas\": {\n  \n      borderRadius: \"4px\",\n\n        height: \"calc(100vh - 200px) !important\",\n        width: \"auto !important\",\n    },\n    \"& div div div\": {\n      display: \"none\",\n    },\n  },\n  box: {\n    backgroundColor: \"#2C6DC5\",\n    padding: \"40px\",\n    height: \"calc(100vh - 64px)\",\n    \"@media (min-width: 960px)\": {\n      position: \"fixed\",\n      width: \"50%\",\n      top: \"64px\",\n      padding: 0,\n    }\n  },\n  button: {\n    backgroundColor: theme.palette.common.white\n  },\n}));\n\nexport const generatePdfDocument = async (documentData: Resume, resumeStyle: number) => {\n  if(resumeStyle === 2) {\n    const blob = await pdf(<PdfDocument2 {...documentData} />).toBlob();\n    saveAs(blob, \"cv.pdf\");\n  }\n  else if(resumeStyle === 1) {\n    const blob = await pdf(<PdfDocument {...documentData} />).toBlob();\n    saveAs(blob, \"cv.pdf\");\n  }\n};\n\nconst ResumePreview: React.FunctionComponent<IResumePreviewProps> = ({\n  resume,\n  resumeStyle\n}: IResumePreviewProps) => {\n  const classes = useStyles();\n  const [generatedResume, setGeneratedResume] = useState<string>();\n  const [numPages, setNumPages] = useState(1);\n  \n  const bufferToUrl = async (buffer: any) => {\n      const stream = buffer.pipe(blobStream());\n\n      const url:string = await new Promise((resolve, reject) => {\n        stream.on('finish', () => {\n          resolve(stream.toBlobURL('application/pdf'));\n        });\n        stream.on('error', reject);\n      });\n\n      setGeneratedResume(url ? url : \"\");\n  }\n\n  useEffect(() => {\n    if(resume) {\n      if(resumeStyle === 2) {\n        pdf(<PdfDocument2 {...resume!} />).toBuffer().then(bufferToUrl)\n      }\n      else if(resumeStyle === 1) {\n        pdf(<PdfDocument {...resume!} />).toBuffer().then(bufferToUrl)\n      }\n    }  \n  }, [resumeStyle, resume]);\n\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function onDocumentLoadSuccess({ numPages }: any) {\n    setNumPages(numPages);\n  }\n\n  return (\n    <Box className={classes.box}>\n      <Grid container alignItems=\"center\" direction=\"column\" spacing={2}>\n        <Grid item style={{width: \"calc(67vh - 96px)\"}}>\n      <Paper\n        elevation={8}\n        className={`${classes.paper} ${generatedResume && classes.pdfStyles}`}\n      >\n        {!generatedResume ? (\n          <ResumeLoadingPlaceholder />\n        ) : (\n          <Doc\n            file={generatedResume}\n            onLoadSuccess={onDocumentLoadSuccess}\n            loading={<ResumeLoadingPlaceholder />}\n          >\n            <DocPage pageNumber={numPages} style={{ width: \"0px\" }} />\n          </Doc>\n        )}\n      </Paper>\n      </Grid>\n      <Grid item>\n                        <Button\n                          variant=\"contained\"\n                          className={classes.button}\n                          disabled={!resume}\n                          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                          onClick={() => generatePdfDocument(resume!, resumeStyle)}\n                        >\n                          Download as PDF\n                        </Button>\n                      </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ResumePreview;\n"]},"metadata":{},"sourceType":"module"}