{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Typography, Grid, TextField, Box, Switch, Chip } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Navbar from \"../components/navbar/navbar.component\";\nimport ParallelogramIcon from \"../components/icons/parallelogram.icon\";\nimport SquareIcon from \"../components/icons/square.icon\";\nimport { getFormValues } from \"../helper/getFormValues\";\nimport ResumeSection from \"../components/resume/resumeSection.component\";\nimport ResumePreview from \"../components/resume/resumePreview.component\";\nimport PersonalDetailsSection from \"../components/resume/personalDetails.component\";\nimport EducationSection from \"../components/resume/educationSection.component\";\nimport EmploymentSection from \"../components/resume/employmentSection.component\";\nimport LinkSection from \"../components/resume/linkSection.component\";\nexport default function Resume() {\n  const {\n    0: skills,\n    1: setSkills\n  } = useState();\n  const {\n    0: resume,\n    1: setResume\n  } = useState(undefined);\n  const {\n    0: resumeStyle,\n    1: setResumeStyle\n  } = useState(1);\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const formRef = useRef(null);\n  const {\n    getAccessTokenSilently\n  } = useAuth0();\n  useEffect(() => {\n    (async () => {\n      try {\n        // setResume({} as ResumeInterface);\n        const token = await getAccessTokenSilently();\n        const response = await fetch(`http://localhost:3001/v1/resume/0`, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const responseData = await response.json();\n\n        if (responseData.statusCode === 404) {\n          const token = await getAccessTokenSilently();\n          const response1 = await fetch(`http://localhost:3001/v1/resume`, {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const responseData1 = await response1.json();\n          setResume(responseData1);\n          const skillNames = responseData.skills.map(({\n            name\n          }) => {\n            console.log(name);\n            return name;\n          });\n          setSkills(skillNames);\n        } else {\n          setResume(responseData);\n          const skillNames = responseData.skills.map(({\n            name\n          }) => {\n            console.log(name);\n            return name;\n          });\n          setSkills(skillNames);\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    })();\n  }, [getAccessTokenSilently]);\n\n  const updateResume = async () => {\n    const form = formRef.current;\n    const formData = getFormValues(form);\n    console.log(skills);\n    formData.skills = skills;\n\n    try {\n      const token = await getAccessTokenSilently();\n      const response = await fetch(`http://localhost:3001/v1/resume/0`, {\n        method: \"PATCH\",\n        body: JSON.stringify(formData),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const responseData = await response.json();\n      setResume(responseData);\n      const skillNames = responseData.skills.map(({\n        name\n      }) => {\n        console.log(name);\n        return name;\n      });\n      setSkills(skillNames);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const handleChange = () => {\n    setChecked(!checked);\n    setResumeStyle(!checked ? 2 : 1);\n  };\n\n  const skillsList = [{\n    title: 'React'\n  }, {\n    title: 'Javascript'\n  }, {\n    title: 'Java'\n  }, {\n    title: 'Front-end'\n  }, {\n    title: 'Back-end'\n  }, {\n    title: 'UI Design'\n  }, {\n    title: 'UX Research'\n  }, {\n    title: 'Copywriting'\n  }, {\n    title: 'Illustrating'\n  }, {\n    title: 'Figma'\n  }];\n  return __jsx(React.Fragment, null, __jsx(Navbar, null), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, __jsx(ResumePreview, {\n    resume: resume,\n    resumeStyle: resumeStyle\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, __jsx(Box, {\n    p: 3,\n    pt: 12\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\"\n  }, __jsx(\"form\", {\n    ref: formRef,\n    noValidate: true,\n    autoComplete: \"off\"\n  }, __jsx(Box, {\n    pb: 4\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true\n  }, !resume ? __jsx(Skeleton, {\n    variant: \"text\",\n    width: 140,\n    height: 26\n  }) : __jsx(Typography, {\n    variant: \"h2\"\n  }, \"Your R\\xE9sum\\xE9\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Switch, {\n    checked: checked,\n    onChange: handleChange,\n    name: \"checkedA\",\n    inputProps: {\n      'aria-label': 'secondary checkbox'\n    }\n  }))))), __jsx(PersonalDetailsSection, {\n    loading: !resume,\n    onChange: updateResume,\n    firstName: resume && resume.user && resume.user.firstName,\n    lastName: resume && resume.user && resume.user.lastName,\n    phoneNumber: resume && resume.user && resume.user.phoneNumber,\n    email: resume && resume.user && resume.user.email,\n    title: resume && resume.resume && resume.resume.title\n  }), __jsx(ResumeSection, {\n    loading: !resume,\n    icon: __jsx(ParallelogramIcon, {\n      fontSize: \"large\"\n    }),\n    heading: \"Describe you and your work\",\n    subtitle: \"Summarise your professional career in 2 or 3 sentences.\"\n  }, !resume ? __jsx(Skeleton, {\n    variant: \"rect\",\n    width: \"100%\",\n    height: 114\n  }) : __jsx(TextField, {\n    name: \"bio\",\n    fullWidth: true,\n    id: \"filled-textarea\",\n    multiline: true,\n    variant: \"filled\",\n    rows: 4,\n    defaultValue: resume && resume.resume && resume.resume.bio,\n    onChange: () => updateResume()\n  })), resume && __jsx(EmploymentSection, {\n    employment: resume === null || resume === void 0 ? void 0 : resume.jobs,\n    onChange: updateResume\n  }), resume && __jsx(EducationSection, {\n    educations: resume === null || resume === void 0 ? void 0 : resume.educations,\n    onChange: updateResume\n  }), resume && skills && __jsx(ResumeSection, {\n    icon: __jsx(SquareIcon, {\n      fontSize: \"large\"\n    }),\n    heading: \"Skills\",\n    subtitle: \"Add keywords to your resume to help potential employers get a clearer picture of what your skills are in the workplace.\"\n  }, __jsx(Autocomplete, {\n    multiple: true,\n    id: \"skills\",\n    options: skillsList.map(option => option.title),\n    freeSolo: true,\n    renderTags: (value, getTagProps) => value.map((option, index) => __jsx(Chip, _extends({\n      color: \"primary\",\n      label: option\n    }, getTagProps({\n      index\n    })))) // defaultValue={[...skills]}\n    ,\n    onChange: (event, value) => {\n      console.log(value);\n      setSkills(value);\n      updateResume();\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      variant: \"filled\",\n      placeholder: \"Add skills\",\n      fullWidth: true\n    }))\n  })), resume && __jsx(LinkSection, {\n    links: resume === null || resume === void 0 ? void 0 : resume.links,\n    onChange: updateResume\n  })))))));\n}","map":null,"metadata":{},"sourceType":"module"}