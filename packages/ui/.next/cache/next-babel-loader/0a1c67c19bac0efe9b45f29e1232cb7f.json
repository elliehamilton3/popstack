{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ellie/Developer/popstack/packages/ui/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ellie/Developer/popstack/packages/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport getStripe from '../utils/get-stripejs';\nimport { fetchPostJSON } from '../utils/api-helpers';\nimport { Card, CardContent, Typography, CardActions, Button, Grid } from '@material-ui/core';\n\nvar CheckoutForm = function CheckoutForm() {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // React.FormEventHandler<HTMLFormElement>\n\n\n  var handleSubmit = function handleSubmit(priceId) {\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var response, stripe, _yield$redirectToChec, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                setLoading(true); // Create a Checkout Session.\n\n                _context.next = 4;\n                return fetchPostJSON('/api/checkout_sessions', {\n                  priceId: priceId\n                });\n\n              case 4:\n                response = _context.sent;\n\n                if (!(response.statusCode === 500)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.error(response.message);\n                return _context.abrupt(\"return\");\n\n              case 8:\n                _context.next = 10;\n                return getStripe();\n\n              case 10:\n                stripe = _context.sent;\n                _context.next = 13;\n                return stripe.redirectToCheckout({\n                  // Make the id field from the Checkout Session creation API response\n                  // available to this file, so you can provide it as parameter here\n                  // instead of the {{CHECKOUT_SESSION_ID}} placeholder.\n                  sessionId: response.id\n                });\n\n              case 13:\n                _yield$redirectToChec = _context.sent;\n                error = _yield$redirectToChec.error;\n                // If `redirectToCheckout` fails due to a browser or network\n                // error, display the localized error message to your customer\n                // using `error.message`.\n                console.warn(error.message);\n                setLoading(false);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(\"oneweek\")\n  }, __jsx(Card, null, __jsx(CardContent, null, __jsx(Typography, {\n    variant: \"h2\"\n  }, \"\\xA32\"), __jsx(Typography, {\n    variant: \"h3\"\n  }, \"7-day trial\")), __jsx(CardActions, null, __jsx(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    type: \"submit\",\n    disabled: loading,\n    color: \"primary\"\n  }, \"Pay now\"))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(\"monthly\")\n  }, __jsx(Card, null, __jsx(CardContent, null, __jsx(Typography, {\n    variant: \"h2\"\n  }, \"\\xA35\"), __jsx(Typography, {\n    variant: \"h3\"\n  }, \"1 month\")), __jsx(CardActions, null, __jsx(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    type: \"submit\",\n    disabled: loading,\n    color: \"primary\"\n  }, \"Pay now\"))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(\"yearly\")\n  }, __jsx(Card, null, __jsx(CardContent, null, __jsx(Typography, {\n    variant: \"h2\"\n  }, \"\\xA350\"), __jsx(Typography, {\n    variant: \"h3\"\n  }, \"1 year\")), __jsx(CardActions, null, __jsx(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    type: \"submit\",\n    disabled: loading,\n    color: \"primary\"\n  }, \"Pay now\"))))));\n};\n\nexport default CheckoutForm;","map":null,"metadata":{},"sourceType":"module"}