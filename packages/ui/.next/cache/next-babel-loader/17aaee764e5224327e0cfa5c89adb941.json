{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable */\nfunction parseDotNotation(str, val, obj) {\n  let currentObj = obj,\n      keys = str.split(\".\"),\n      i,\n      l = Math.max(1, keys.length - 1),\n      key;\n\n  for (i = 0; i < l; ++i) {\n    key = keys[i];\n    currentObj[key] = currentObj[key] || {};\n    currentObj = currentObj[key];\n  }\n\n  currentObj[keys[i]] = val;\n  delete obj[str];\n}\n\nfunction convertDotNotationToObject(obj) {\n  for (const key in obj) {\n    if (key.indexOf(\".\") !== -1) {\n      parseDotNotation(key, obj[key], obj);\n    }\n  }\n\n  return obj;\n}\n\nfunction serializeArray(form) {\n  const arr = [];\n  Array.prototype.slice.call(form.elements).forEach(field => {\n    if (!field.name || field.disabled || [\"file\", \"reset\", \"submit\", \"button\"].indexOf(field.type) > -1) return;\n\n    if (field.type === \"select-multiple\") {\n      Array.prototype.slice.call(field.options).forEach(option => {\n        if (!option.selected) return;\n        arr.push({\n          name: field.name,\n          value: option.value\n        });\n      });\n      return;\n    }\n\n    if ([\"checkbox\", \"radio\"].indexOf(field.type) > -1 && !field.checked) return;\n    arr.push({\n      name: field.name,\n      value: field.value\n    });\n  });\n  return arr;\n}\n\nexport function getFormValues(form) {\n  const serializedArray = serializeArray(form); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const output = {};\n  serializedArray.forEach(item => {\n    if (item.name.split(\"-\")[0] === \"educations\" || item.name.split(\"-\")[0] === \"jobs\" || item.name.split(\"-\")[0] === \"links\") {\n      if (!output[item.name.split(\"-\")[0]]) output[item.name.split(\"-\")[0]] = [];\n      output[item.name.split(\"-\")[0]][item.name.split(\"-\")[2]] = _objectSpread(_objectSpread({}, output[item.name.split(\"-\")[0]][item.name.split(\"-\")[2]]), {}, {\n        [item.name.split(\"-\")[1]]: item.value\n      });\n    } else {\n      output[item.name] = item.value;\n    }\n  });\n  return convertDotNotationToObject(output);\n}","map":{"version":3,"sources":["/ui/helper/getFormValues.ts"],"names":["parseDotNotation","str","val","obj","currentObj","keys","split","i","l","Math","max","length","key","convertDotNotationToObject","indexOf","serializeArray","form","arr","Array","prototype","slice","call","elements","forEach","field","name","disabled","type","options","option","selected","push","value","checked","getFormValues","serializedArray","output","item"],"mappings":"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","sourcesContent":["/* eslint-disable */\nfunction parseDotNotation(str: string, val: any, obj: { [x: string]: any }) {\n  let currentObj = obj,\n    keys = str.split(\".\"),\n    i,\n    l = Math.max(1, keys.length - 1),\n    key;\n\n  for (i = 0; i < l; ++i) {\n    key = keys[i];\n    currentObj[key] = currentObj[key] || {};\n    currentObj = currentObj[key];\n  }\n\n  currentObj[keys[i]] = val;\n  delete obj[str];\n}\n\nfunction convertDotNotationToObject(obj: { [x: string]: any }) {\n  for (const key in obj) {\n    if (key.indexOf(\".\") !== -1) {\n      parseDotNotation(key, obj[key], obj);\n    }\n  }\n  return obj;\n}\n\nfunction serializeArray(form: HTMLFormElement) {\n  const arr: any[] = [];\n  Array.prototype.slice.call(form.elements).forEach((field: any) => {\n    if (\n      !field.name ||\n      field.disabled ||\n      [\"file\", \"reset\", \"submit\", \"button\"].indexOf(field.type) > -1\n    )\n      return;\n    if (field.type === \"select-multiple\") {\n      Array.prototype.slice.call(field.options).forEach((option: any) => {\n        if (!option.selected) return;\n        arr.push({\n          name: field.name,\n          value: option.value,\n        });\n      });\n      return;\n    }\n    if ([\"checkbox\", \"radio\"].indexOf(field.type) > -1 && !field.checked)\n      return;\n    arr.push({\n      name: field.name,\n      value: field.value,\n    });\n  });\n  return arr;\n}\n\nexport function getFormValues(form: HTMLFormElement) {\n  const serializedArray = serializeArray(form);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const output = {} as any;\n\n  serializedArray.forEach((item) => {\n    if (\n      item.name.split(\"-\")[0] === \"educations\" ||\n      item.name.split(\"-\")[0] === \"jobs\" ||\n      item.name.split(\"-\")[0] === \"links\"\n    ) {\n      if (!output[item.name.split(\"-\")[0]])\n        output[item.name.split(\"-\")[0]] = [];\n      output[item.name.split(\"-\")[0]][item.name.split(\"-\")[2]] = {\n        ...output[item.name.split(\"-\")[0]][item.name.split(\"-\")[2]],\n        [item.name.split(\"-\")[1]]: item.value,\n      };\n    } else {\n      output[item.name] = item.value;\n    }\n  });\n\n  return convertDotNotationToObject(output);\n}\n"]},"metadata":{},"sourceType":"module"}