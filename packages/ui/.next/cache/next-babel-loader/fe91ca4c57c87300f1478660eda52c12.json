{"ast":null,"code":"var __jsx = React.createElement;\nimport { Box, Grid, Paper, Typography, makeStyles, Button } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React, { useEffect, useState } from \"react\";\nimport PdfDocument from \"./pdfDocument.component\";\nimport PdfDocument2 from \"./pdfDocument2.component\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport { saveAs } from \"file-saver\";\nimport { Document as Doc, Page as DocPage } from \"react-pdf/dist/esm/entry.webpack\";\nimport blobStream from 'blob-stream';\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: \"40px\",\n    minHeight: \"calc(100vh - 176px)\",\n    minWidth: 0\n  },\n  pdfStyles: {\n    \"& canvas\": {\n      borderRadius: \"4px\",\n      height: \"calc(100vh - 200px) !important\",\n      width: \"auto !important\"\n    },\n    \"& div div div\": {\n      display: \"none\"\n    }\n  },\n  box: {\n    backgroundColor: \"#2C6DC5\",\n    padding: \"40px\",\n    height: \"calc(100vh - 64px)\",\n    \"@media (min-width: 960px)\": {\n      position: \"fixed\",\n      width: \"50%\",\n      top: \"64px\",\n      padding: 0\n    }\n  },\n  button: {\n    backgroundColor: theme.palette.common.white\n  }\n}));\nexport const generatePdfDocument = async (documentData, resumeStyle) => {\n  if (resumeStyle === 2) {\n    const blob = await pdf(__jsx(PdfDocument2, documentData)).toBlob();\n    saveAs(blob, \"cv.pdf\");\n  } else if (resumeStyle === 1) {\n    const blob = await pdf(__jsx(PdfDocument, documentData)).toBlob();\n    saveAs(blob, \"cv.pdf\");\n  }\n};\n\nconst ResumePreview = ({\n  resume,\n  resumeStyle\n}) => {\n  const classes = useStyles();\n  const {\n    0: generatedResume,\n    1: setGeneratedResume\n  } = useState();\n  const {\n    0: numPages,\n    1: setNumPages\n  } = useState(1);\n\n  const bufferToUrl = async buffer => {\n    const stream = buffer.pipe(blobStream());\n    const url = await new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        resolve(stream.toBlobURL('application/pdf'));\n      });\n      stream.on('error', reject);\n    });\n    setGeneratedResume(url ? url : \"\");\n  };\n\n  useEffect(() => {\n    if (resume) {\n      if (resumeStyle === 2) {\n        pdf(__jsx(PdfDocument2, resume)).toBuffer().then(bufferToUrl);\n      } else if (resumeStyle === 1) {\n        pdf(__jsx(PdfDocument, resume)).toBuffer().then(bufferToUrl);\n      }\n    }\n  }, [resumeStyle, resume]); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  function onDocumentLoadSuccess({\n    numPages\n  }) {\n    setNumPages(numPages);\n  }\n\n  const loadingComponent = __jsx(Box, {\n    p: 4\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h1\"\n  }, __jsx(Skeleton, {\n    width: \"200px\"\n  })), __jsx(Typography, {\n    variant: \"h2\"\n  }, __jsx(Skeleton, {\n    width: \"120px\"\n  })), __jsx(Typography, {\n    variant: \"body1\"\n  }, __jsx(Skeleton, {\n    width: \"80px\"\n  })))));\n\n  return __jsx(Box, {\n    className: classes.box\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    direction: \"column\",\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Paper, {\n    elevation: 8,\n    className: `${classes.paper} ${generatedResume && classes.pdfStyles}`\n  }, !generatedResume ? loadingComponent : __jsx(Doc, {\n    file: generatedResume,\n    onLoadSuccess: onDocumentLoadSuccess,\n    loading: loadingComponent\n  }, __jsx(DocPage, {\n    pageNumber: numPages,\n    style: {\n      width: \"0px\"\n    }\n  })))), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"contained\",\n    className: classes.button,\n    disabled: !resume // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ,\n    onClick: () => generatePdfDocument(resume, resumeStyle)\n  }, \"Download as PDF\"))));\n};\n\nexport default ResumePreview;","map":null,"metadata":{},"sourceType":"module"}