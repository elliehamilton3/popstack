{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ellie/Developer/popstack/packages/ui/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ellie/Developer/popstack/packages/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { Box, Grid, Paper, Typography, makeStyles, Button } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React, { useEffect, useState } from \"react\";\nimport PdfDocument from \"./pdfDocument.component\";\nimport PdfDocument2 from \"./pdfDocument2.component\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport { saveAs } from \"file-saver\";\nimport { Document as Doc, Page as DocPage } from \"react-pdf/dist/esm/entry.webpack\";\nimport blobStream from 'blob-stream';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      marginTop: \"40px\",\n      minHeight: \"calc(100vh - 176px)\",\n      minWidth: 0\n    },\n    pdfStyles: {\n      \"& canvas\": {\n        borderRadius: \"4px\",\n        height: \"calc(100vh - 200px) !important\",\n        width: \"auto !important\"\n      },\n      \"& div div div\": {\n        display: \"none\"\n      }\n    },\n    box: {\n      backgroundColor: \"#2C6DC5\",\n      padding: \"40px\",\n      height: \"calc(100vh - 64px)\",\n      \"@media (min-width: 960px)\": {\n        position: \"fixed\",\n        width: \"50%\",\n        top: \"64px\",\n        padding: 0\n      }\n    },\n    button: {\n      backgroundColor: theme.palette.common.white\n    }\n  };\n});\nexport var generatePdfDocument = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(documentData, resumeStyle) {\n    var blob, _blob;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(resumeStyle === 2)) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 3;\n            return pdf(__jsx(PdfDocument2, documentData)).toBlob();\n\n          case 3:\n            blob = _context.sent;\n            saveAs(blob, \"cv.pdf\");\n            _context.next = 12;\n            break;\n\n          case 7:\n            if (!(resumeStyle === 1)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 10;\n            return pdf(__jsx(PdfDocument, documentData)).toBlob();\n\n          case 10:\n            _blob = _context.sent;\n            saveAs(_blob, \"cv.pdf\");\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function generatePdfDocument(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar ResumePreview = function ResumePreview(_ref2) {\n  var resume = _ref2.resume,\n      resumeStyle = _ref2.resumeStyle;\n  var classes = useStyles();\n\n  var _useState = useState(),\n      generatedResume = _useState[0],\n      setGeneratedResume = _useState[1];\n\n  var _useState2 = useState(1),\n      numPages = _useState2[0],\n      setNumPages = _useState2[1];\n\n  var bufferToUrl = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(buffer) {\n      var stream, url;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              stream = buffer.pipe(blobStream());\n              _context2.next = 3;\n              return new Promise(function (resolve, reject) {\n                stream.on('finish', function () {\n                  resolve(stream.toBlobURL('application/pdf'));\n                });\n                stream.on('error', reject);\n              });\n\n            case 3:\n              url = _context2.sent;\n              setGeneratedResume(url ? url : \"\");\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function bufferToUrl(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (resume) {\n      if (resumeStyle === 2) {\n        pdf(__jsx(PdfDocument2, resume)).toBuffer().then(bufferToUrl);\n      } else if (resumeStyle === 1) {\n        pdf(__jsx(PdfDocument, resume)).toBuffer().then(bufferToUrl);\n      }\n    }\n  }, [resumeStyle, resume]); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  function onDocumentLoadSuccess(_ref4) {\n    var numPages = _ref4.numPages;\n    setNumPages(numPages);\n  }\n\n  var loadingComponent = __jsx(Box, {\n    p: 4\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h1\"\n  }, __jsx(Skeleton, {\n    width: \"200px\"\n  })), __jsx(Typography, {\n    variant: \"h2\"\n  }, __jsx(Skeleton, {\n    width: \"120px\"\n  })), __jsx(Typography, {\n    variant: \"body1\"\n  }, __jsx(Skeleton, {\n    width: \"80px\"\n  })))));\n\n  return __jsx(Box, {\n    className: classes.box\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    direction: \"column\",\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Paper, {\n    elevation: 8,\n    className: \"\".concat(classes.paper, \" \").concat(generatedResume && classes.pdfStyles)\n  }, !generatedResume ? loadingComponent : __jsx(Doc, {\n    file: generatedResume,\n    onLoadSuccess: onDocumentLoadSuccess,\n    loading: loadingComponent\n  }, __jsx(DocPage, {\n    pageNumber: numPages,\n    style: {\n      width: \"0px\"\n    }\n  })))), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"contained\",\n    className: classes.button,\n    disabled: !resume // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ,\n    onClick: function onClick() {\n      return generatePdfDocument(resume, resumeStyle);\n    }\n  }, \"Download as PDF\"))));\n};\n\nexport default ResumePreview;","map":null,"metadata":{},"sourceType":"module"}